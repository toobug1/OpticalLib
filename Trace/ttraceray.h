#ifndef TTRACERAY_H
#define TTRACERAY_H

#include <deque>

#include "common.hh"
#include "Light/tray.h"

class TElement;
class TGlass;

class TTraceRay : public TRay
{
public:

    /** Create a propagated light ray */
    TTraceRay();

    /** Create a propagated light ray */
    TTraceRay(const TRay &r);

    GOPTICAL_ACCESSORS(const TElement *, creator, "element which generated this ray.")

    GOPTICAL_ACCESSORS(const TGlass *, material, "material ray is propagated in.")

    GOPTICAL_ACCESSORS(double, intercept_intensity, "ray intensity at interception point.")

    GOPTICAL_ACCESSORS(double, len, "light ray length.")

    /** Define a new child generated ray */
    void add_generated(TTraceRay *r);

    /** Set light ray interception point and element */
    void set_intercept(const TElement &e, const Math::Vector3 &point);
    /** Get light ray interception point */
    const Math::Vector3 & get_intercept_point() const;
    /** Get light ray interception element */
    TElement & get_intercept_element() const;

    /** Get ray which generated this one */
    TTraceRay * get_parent() const;
    /** Get first ray generated from this one */
    TTraceRay * get_first_child() const;
    /** Get next sibling ray generated by same parent */
    TTraceRay * get_next_child() const;

    /** Return true if ray is not intercepted */
    bool is_lost() const;

    /** Get global position */
    Math::Vector3 get_position() const;
    /** Get global direction */
    Math::Vector3 get_direction() const;

    /** Get position relative to given element */
    Math::Vector3 get_position(const TElement &e) const;
    /** Get direction relative to given element */
    Math::Vector3 get_direction(const TElement &e) const;

private:
    TTraceRay(const TTraceRay &);
    const TTraceRay & operator=(const TTraceRay &r);

    Math::Vector3     _point;         // ray intersection point (intersect surface local)
    double            _intercept_intensity;   // intersection point intensity
    double            _len;           // ray length
    const TElement    *_creator;      // element which generated this ray
    const TGlass      *_material;     // material
    TElement          *_i_element;    // intersect element
    TTraceRay         *_parent;       // ray which generated this one
    TTraceRay         *_child;        // pointer to generated ray
    TTraceRay         *_next;         // pointer to sibling generated ray
    bool              _lost;          // does the ray intersect with an element ?
};

typedef std::deque<TTraceRay *> rays_queue_t;

#endif // TTRACERAY_H
