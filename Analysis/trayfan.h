#ifndef TRAYFAN_H
#define TRAYFAN_H

#include <QSharedPointer>

#include "common.hh"
#include "Trace/ttracer.h"
#include "Trace/tdistribution.h"
#include "Math/VectorPair"
#include "Data/tplot.h"

using namespace _Goptical;

class TRayFan
{
public:
    /** Specify ray aberration values to plot. Angle and Distance
      aberrations values are considered in selected aberration
      plane. Entrance Height and Angle are considered in selected
      distribution plane. */
    enum rayfan_plot_type_e
    {
        /** Normalized ray height (radial distance) on entrance pupil */
        EntranceHeight,
        /** Angle of ray on entrance pupil */
        EntranceAngle,
        /** Distance on the surface from the intercept of the chief ray */
        TransverseDistance,
        /** Distance along the chief ray from the surface to the measured ray. */
        LongitudinalDistance,
        /** Angle of ray striking the target surface */
        ImageAngle,
        /** Angle of ray leaving (generated by) the target surface */
        ExitAngle,
        /** Optical path difference in waves */
        OpticalPathDiff,
    };

    /** Specify aberration analysis plane on target surface */
    enum rayfan_plane_e
    {
        SagittalAberration = 0,
        TangentialAberration = 1
    };

    TRayFan(const Sys::TSystem &system,
            enum rayfan_plane_e plane = TangentialAberration);

    /** Set entrance pupil ray distribution plane. */
    void set_plane(enum rayfan_plane_e plane);

    /** Get internal distribution object */
    Trace::Distribution & get_distribution();

    /** Aberrations are considered in the given plane on the
      target surface. Default is to use the same plane as entrance
      pupil ray distribution plane. */
    void set_aberration_plane(enum rayfan_plane_e plane);

    /** Specify entrance pupil surface to use for analysis, query
      system for entrance pupil if none defined here. */
    void set_entrance_surface(const Sys::Surface &s);

    /** Specify target surface (image or exit pupil) to use for
      analysis, query system for image surface if none defined
      here. */
    void set_target_surface(const Sys::Surface &s);

    /** Set longitudinal reference ray (local to target
      surface). Longitudinal aberration computes distance between
      each rays and target surface plane along this reference
      vector. Default value is along the Z axis. */
    void set_longitudinal_reference(const Math::VectorPair3 &ref);

    /** Get aberration plot, requested x value is plotted against
      requested y value. */
    QSharedPointer<TPlot> get_plot(enum rayfan_plot_type_e x,
                             enum rayfan_plot_type_e y);

    /** Invalidate current analysis data and raytrace again on next
      plot request */
    void invalidate();

private:
    void process_trace();

    typedef double (TRayFan::*get_value_t)(const TTraceRay &r,
                                           const TTraceRay &chief) const;

    const TTraceRay & find_chief_ray(const Trace::rays_queue_t &intercepts,
                                      double wavelen);

    double get_entrance_height(const TTraceRay &r,
                               const TTraceRay &chief) const;
    double get_entrance_angle(const TTraceRay &r,
                              const TTraceRay &chief) const;
    double get_transverse_distance(const TTraceRay &r,
                                   const TTraceRay &chief) const;
    double get_longitudinal_distance(const TTraceRay &r,
                                     const TTraceRay &chief) const;
    double get_optical_path_len(const TTraceRay &r,
                                const TTraceRay &chief) const;
    double get_image_angle(const TTraceRay &r,
                           const TTraceRay &chief) const;
    double get_exit_angle(const TTraceRay &r,
                          const TTraceRay &chief) const;

    TTracer     _tracer;
    bool              _processed_trace;

    const Sys::Surface *_entrance;
    const Sys::Surface *_exit;

    TDistribution _dist;
    Math::VectorPair3 _ref_ray;
    enum rayfan_plane_e _dist_plane;
    enum rayfan_plane_e _ab_plane;
};

#endif // TRAYFAN_H
